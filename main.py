import logging
import requests
import locale
import time
from datetime import datetime
import rosario
from aiogram import Bot, Dispatcher, F
from aiogram.types import BotCommand
from aiogram.filters import Command
from aiogram.types import (CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from bs4 import BeautifulSoup
from aiogram.enums import ParseMode
from aiogram.filters import Command
from openai import OpenAI
import os
from aiogram import Bot, types
from aiogram.types import FSInputFile
from aiohttp import web

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = '7247038755:AAE2GEPMR-XDaoFoTIZWidwH-ZQfD7g36pE'

TOGETHER_API_KEY = "09392b9d19cab71d0a2300b1df5ca81df0b78a1f97457528d4ef53f5e25c60c1"

client = OpenAI(
    api_key=TOGETHER_API_KEY,
    base_url="https://api.together.xyz/v1"
)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞

chosenLanguage = False
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_choices = {}
user_state = {}

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
continuar = InlineKeyboardButton(
    text='‚ñ∂Ô∏è‚ñ∂Ô∏è',
    callback_data='continuar_pressed'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[continuar]])

checkboxes_state = {}
params = {}

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
peticiones = InlineKeyboardButton(
    text='Peticiones',
    callback_data='peticiones_pressed'
)

PeticionesDelDia = InlineKeyboardButton(
    text='Peticiones Del Dia',
    callback_data='peticiones_dia'
)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
p_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[peticiones]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
peticiones_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[PeticionesDelDia], [continuar]])

peticiones_dia_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[continuar]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –û—Ç—á–µ –ù–∞—à
aveMaria = InlineKeyboardButton(
    text='‚ñ∂Ô∏è‚ñ∂Ô∏è',
    callback_data='start_primera_ave'
)



# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
porSignum_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[continuar]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
ave_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[aveMaria]])

latin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[continuar]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
letanias = InlineKeyboardButton(
    text='Letan√≠as de la virgen',
    callback_data='let_pressed'
)

bajo = InlineKeyboardButton(
    text='‚ñ∂Ô∏è‚ñ∂Ô∏è',
    callback_data='bajo_pressed'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
finish_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[letanias],
                     [bajo]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
let_cycle_answer_next = InlineKeyboardButton(
    text=f'‚è≠Ô∏è',
    callback_data='let_cycle_answer_pressed_next'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
let_cycle_answer_back = InlineKeyboardButton(
    text=f'‚èÆÔ∏è',
    callback_data='let_cycle_answer_pressed_back'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
let_cycle_keyboard_beginning = InlineKeyboardMarkup(
    inline_keyboard=[[let_cycle_answer_next]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
let_cycle_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[let_cycle_answer_back,let_cycle_answer_next]])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_inline_keyboard(button_text: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=button_text, callback_data='let_cycle_answer_pressed')]
        ]
    )
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
let_fin = InlineKeyboardButton(
    text='‚ñ∂Ô∏è‚ñ∂Ô∏è',
    callback_data='let_fin_pressed'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
let_fin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[let_fin]])


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
let_cycle_keyboard_last = InlineKeyboardMarkup(
    inline_keyboard=[[let_cycle_answer_back,let_fin]])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
ruega = InlineKeyboardButton(
    text='‚ñ∂Ô∏è‚ñ∂Ô∏è',
    callback_data='ruega_pressed'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
ruega_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[ruega]])

def get_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Espa√±ol", callback_data="lang:es"),
         InlineKeyboardButton(text="Latin", callback_data="lang:la")]
    ])
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
pray = InlineKeyboardButton(
    text='üôèEmpezar a rezar el rosarioüôè',
    callback_data='pray_pressed'
)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
pray_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[pray]])


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
def get_news_links():
    current_date = datetime.now()
    formatted_date = current_date.strftime('%Y-%m')
    url = 'https://www.vaticannews.va/ru.html'
    response = requests.get(url)
    response.encoding = 'utf-8'

    links = []

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        articles = soup.find_all('a', href=True, title=True)

        for article in articles:
            link = f"https://www.vaticannews.va{article['href']}"
            if f'/ru/pope/news/{formatted_date}' in link and link not in links:
                links.append(link)

    return links



# –í—ã–∑–æ–≤ AI
def generate_prayers(links):
    joined_links = "\n\n".join(links)

    response = client.chat.completions.create(
        model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
        messages=[
            {
                "role": "user",
                "content": (
                    "Read the following news articles, excluding irrelevant events from the perspective of Catholicism. "
                    "Only consider news related to faith, spirituality, human rights, social issues, peace, health, and other important topics from a moral standpoint. "
                    "Based on these news items, formulate one or more prayer intentions for the Holy Rosary. "
                    "Each prayer intention should be a brief, complete sentence or a paragraph, in the form of a prayer. "
                    "Avoid breaking the text into separate words or elements. "
                    "The prayer should express a desire for peace, blessings, and help for those in need. "
                    "Provide the result in a clean, readable text format with clear prayer intentions:\n\n"
                    f"{joined_links}\n\n"
                    "Write your result en spanish without numeration and finish with 'Am√©n'."
                )
            }
        ]
    )

    return response.choices[0].message.content.strip()

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def set_main_menu(bot: Bot):

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ menu
    main_menu_commands = [
        BotCommand(command='/start',
                   description='üôèEmpezar')
    ]

    await bot.set_my_commands(main_menu_commands)


# –£–∑–Ω–∞–µ–º —è–∑—ã–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
language = locale.getlocale()[0].partition('_')[0].lower()

language = 'espa√±ol'

#–£–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
user = {
    'in_pray': False,
    'pray_done': False
}

cycleOraciones = False

current_message = 0
cycle = 0
mystery = 0
answerNumber = 0
aveMtimes = 0
aveVercion = ''
oracionVercion = ''
m_type = ''
row = 0
message_list = []
beforeCycleList = [
    rosario.venEspirituSanto[language],
    rosario.credo[language]
]
orarCombiar = {
    'perSigniumcrucis': False,
    'padre': False
}

CallbackTypeAve = ''

keyboard_letania = ''


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer(f'{rosario.textStart[language]}', reply_markup=get_language_keyboard())
    selected = await message.answer("A√∫n no has seleccionado un idioma.")
    user_data[message.from_user.id] = selected.message_id
    user_id = message.from_user.id


@dp.callback_query(F.data.startswith("lang:"))
async def language_callback(callback: CallbackQuery):
    global language
    lang_code = callback.data.split(":")[1]
    lang_name = "Espa√±ol" if lang_code == "es" else "Latin"
    language = "espa√±ol" if lang_code == "es" else "latin"

    user_id = callback.from_user.id
    selected_msg_id = user_data.get(user_id)

    if selected_msg_id:
        try:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=selected_msg_id,
                text=f"Escogiste el idioma para orar:  {lang_name}",
                reply_markup = pray_keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    await callback.answer()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/pray"
@dp.callback_query(F.data == 'pray_pressed')
async def answer(callback: CallbackQuery):
    current_date = datetime.now()
    wday = current_date.weekday()
    global m_type, message_list, orarCombiar, oracionVercion
    
    if wday == 0 or wday == 5:
        m_type = 'gaudiosa'
    elif wday == 3:
        m_type = 'luminosa'
    elif wday == 1 or wday == 4:
        m_type = 'dolorosa'
    else:
        m_type = 'gloriosa'

    message_list = [
        rosario.mysteries[m_type][language],
        rosario.paterNoster[language],
        rosario.gloria[language],
        rosario.oratioFatimae[language],
        rosario.MariaMadreDeGracia[language]
    ]
    if not user['in_pray']:
        user['in_pray'] = True
        orarCombiar['perSigniumcrucis'] = True
        oracionVercion = "original"

        # Send image with prayer text as caption
        photo = FSInputFile("persignum.jpg")
        await callback.message.answer_photo(photo, caption=f'{rosario.perSigniumcrucis[language]}', reply_markup=porSignum_keyboard)
    else:
        await callback.message.answer(text=f'El comando de oraci√≥n ya est√° en ejecuci√≥n. Para continuar, haga clic en "Continuar"', reply_markup=keyboard)

@dp.callback_query(F.data == 'continuar_pressed')
async def answer(callback: CallbackQuery):
    global rosario, mystery, message_list, user, orarCombiar, oracionVercion, cycleOraciones, cycle, current_message, user_choices, user_state, aveMtimes
    if user['in_pray'] and not cycleOraciones:
        if current_message == 0:
            await callback.message.answer(text=f'{rosario.venEspirituSanto[language]}', reply_markup=keyboard)
            current_message += 1
        elif current_message == 1:
            await callback.message.answer(text=f'{rosario.credo[language]}', reply_markup=keyboard)
            current_message += 1
        elif current_message == 2:
            await callback.message.answer(text=f'{rosario.actoDeContricion[language]}', reply_markup=p_keyboard)
            current_message = 0
    if user['in_pray'] and cycleOraciones:
        if cycle == 0:
            if current_message == 0:
                orarCombiar['perSigniumcrucis'] = False
                orarCombiar['padre'] = True
                oracionVercion = "original"
                current_message += 1
                await callback.message.answer(text=f'{message_list[current_message]}', reply_markup=ave_keyboard)
                current_message = 0
                cycle += 1
        elif cycle == 5 and current_message >= len(message_list):
            await callback.message.answer(text=f'{rosario.salveRegina[language]}', reply_markup=finish_keyboard)
            await callback.answer(text='Contin√∫e con la letan√≠as o la oraci√≥n final')
            user['in_pray'] = False
            cycleOraciones = False
            current_message = 0
            cycle = 0
            mystery = 0
        elif current_message >= len(message_list):
            cycle += 1
            current_message = 0
            await callback.message.answer(text=f'{message_list[current_message][mystery]}', reply_markup=keyboard)
            current_message += 1
            mystery += 1
            user_choices = {}
            user_state = {}
            aveMtimes += 1
        elif current_message == 0:
            await callback.message.answer(text=f'{message_list[current_message][mystery]}', reply_markup=keyboard)
            current_message += 1
            mystery += 1
            user_choices = {}
            user_state = {}
            aveMtimes += 1
        elif current_message == 1:
            await callback.message.answer(text=f'{message_list[current_message]}', reply_markup=ave_keyboard)
            current_message += 1
        elif current_message == 2:
            await callback.message.answer(text=f'{message_list[current_message]}', reply_markup=latin_keyboard)
            current_message += 1
        else:
            await callback.message.answer(text=f'{message_list[current_message]}', reply_markup=keyboard)
            current_message += 1
    elif not user['in_pray']:
        await callback.message.answer(text=f'Para comenzar a orar ingrese el comando /pray')


@dp.callback_query(F.data == 'peticiones_pressed')
async def answer(callback: CallbackQuery):
    global cycleOraciones
    await callback.message.answer(text=f'Pensale de tus peticiones:\n\nüôè Se pronuncia la intenci√≥n en la que se recita el Rosario. \nPuedes decir la oraci√≥n inicial:\n\n‚Äú¬°Se√±or nuestro Jesucristo!\nDedico / Te dedicamos / A Ti este santo Rosario para gloria de Tu nombre,\nen honor de Vuestra Madre Pur√≠sima y por la salvaci√≥n de las almas" üôè', reply_markup=peticiones_keyboard)
    cycleOraciones = True


@dp.callback_query(F.data == 'peticiones_dia')
async def send_prayers(callback: CallbackQuery):
    await callback.message.edit_text(text=f'‚è≥ Preparamos peticiones relevantes ‚åõ', reply_markup=peticiones_dia_keyboard)
    links = get_news_links()

    if not links:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", reply_markup=peticiones_dia_keyboard)
        return

    try:
        prayers = generate_prayers(links)
        await callback.message.edit_text(f"üôè Peticiones:\n\n{prayers}", reply_markup=peticiones_dia_keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        await callback.message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–ª–∏—Ç–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=peticiones_dia_keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
@dp.callback_query(F.data == "combiar_vercion")
async def ask_question(query):
    global oracionVercion, orarCombiar, rosario, mystery, message_list, user, cycleOraciones, cycle, current_message
    if oracionVercion == "" or oracionVercion == "original":
        if orarCombiar['perSigniumcrucis']:
            await query.message.edit_caption(caption=f'{rosario.perSigniumcrucis['latin']}', parse_mode="HTML", reply_markup=porSignum_keyboard)
        elif orarCombiar['padre']:
            await query.message.edit_text(text=f'{rosario.paterNoster['latin']}', reply_markup=ave_keyboard)
        else:
            await query.message.edit_text(text=f'{rosario.gloria['latin']}', reply_markup=latin_keyboard)

        oracionVercion = "latin"
    else:
        if orarCombiar['perSigniumcrucis']:
            await query.message.edit_caption(caption=f'{rosario.perSigniumcrucis[language]}', parse_mode="HTML", reply_markup=porSignum_keyboard)
        elif orarCombiar['padre']:
            await query.message.edit_text(text=f'{rosario.paterNoster[language]}', reply_markup=ave_keyboard)
        else:
            await query.message.edit_text(text=f'{rosario.gloria[language]}', reply_markup=latin_keyboard)

        oracionVercion = "original"

    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data == "start_primera_ave")
async def ask_question(query):
    global aveMtimes, aveVercion, row
    aveVercion = "original"
    user_state[query.from_user.id] = 4  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É —Å —Ü–≤–µ—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    if aveMtimes == 0:
        colors = ["1", "2", "3"]
        row = 3
    else:
        colors = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
        row = 3

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ 2 —Ä—è–¥–∞
    row_size = row  # –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞
    for i in range(0, len(colors), row_size):
        row_colors = colors[i:i + row_size]
        buttons = [InlineKeyboardButton(text=f"{color} {'üôè' if color in user_choices.get(query.from_user.id, []) else ''}", callback_data=f"color_{color}") for color in row_colors]
        builder.row(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫


    markup = builder.as_markup()

    if aveMtimes == 0:
        await query.message.answer(text=f'{rosario.aveMaria[language]}\nRepetir 3 veces', reply_markup=markup)
    else:
        await query.message.answer(text=f'{rosario.aveMaria[language]}\nRepetir 10 veces', reply_markup=markup)

    await query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
@dp.callback_query(F.data.startswith("color_"))
async def handle_color_choice(query):
    global cycle, row, CallbackTypeAve
    color = int(query.data.split("_")[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    user_id = query.from_user.id

    if user_id not in user_choices:
        user_choices[user_id] = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–≤–µ—Ç–∞
    for i in range(1, color):
        if str(i) not in user_choices[user_id]:
            await query.answer(text=f"Has orado {i-1} veces. Ahora usted elige el n√∫mero {color}. Por favor, elija el n√∫mero correcto ({i}).", show_alert=True)
            return

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if str(color) in user_choices[user_id]:
        user_choices[user_id].remove(str(color))
    else:
        user_choices[user_id].append(str(color))

    builder = InlineKeyboardBuilder()

    if aveMtimes == 0:
        colors = ["1", "2", "3"]
        row = 3
    else:
        colors = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
        row = 3

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ 2 —Ä—è–¥–∞
    row_size = row  # –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞
    for i in range(0, len(colors), row_size):
        row_colors = colors[i:i + row_size]
        buttons = [InlineKeyboardButton(text=f"{color} {'üôè' if color in user_choices[user_id] else ''}", callback_data=f"color_{color}") for color in row_colors]
        builder.row(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫

    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ñ∂Ô∏è‚ñ∂Ô∏è"
    if aveMtimes == 0:
        if "3" in user_choices[user_id]:
            CallbackTypeAve = "continuar_pressed"
        else:
            CallbackTypeAve = "ave_continuar_cancelar"
    else:
        if "10" in user_choices[user_id]:
            CallbackTypeAve = "continuar_pressed"
        else:
            CallbackTypeAve = "ave_continuar_cancelar"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ñ∂Ô∏è‚ñ∂Ô∏è"
    if aveMtimes == 0:
        if "2" in user_choices[user_id]:
            builder.add(InlineKeyboardButton(text="‚ñ∂Ô∏è‚ñ∂Ô∏è", callback_data=CallbackTypeAve))
    else:
        if "9" in user_choices[user_id]:
            builder.add(InlineKeyboardButton(text="‚ñ∂Ô∏è‚ñ∂Ô∏è", callback_data=CallbackTypeAve))

    markup = builder.as_markup()


    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    await query.message.edit_reply_markup(reply_markup=markup)
    await query.answer()

@dp.callback_query(F.data == 'ave_continuar_cancelar')
async def answer(callback: CallbackQuery):
    await callback.answer(text='Terminale todas las veces y luego continuemos')


@dp.callback_query(F.data == 'bajo_pressed')
async def answer(callback: CallbackQuery):
    global cycleOraciones
    await callback.message.answer(text=f'{rosario.bajoTuAmparo[language]}', reply_markup=ruega_keyboard)
    cycleOraciones = False

@dp.callback_query(F.data == 'let_pressed')
async def answer(callback: CallbackQuery):
    global current_message
    await callback.message.answer(text=f'{rosario.letaniasDeLaVirgenMessage[0]}', parse_mode='Markdown', reply_markup=let_cycle_keyboard_beginning)


@dp.callback_query(F.data == 'let_cycle_answer_pressed_next')
async def answer(callback: CallbackQuery):
    global current_message
    current_message += 1

    if current_message == 0:
        await callback.message.edit_text(
            text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}',
            parse_mode='Markdown',
            reply_markup=let_cycle_keyboard_beginning
        )
    elif current_message == len(rosario.letaniasDeLaVirgenMessage) - 1:
        await callback.message.edit_text(
            text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}',
            parse_mode='Markdown',
            reply_markup=let_cycle_keyboard_last
        )
    elif current_message > len(rosario.letaniasDeLaVirgenMessage) - 1:
        # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞
        current_message = len(rosario.letaniasDeLaVirgenMessage) - 1
    else:
        await callback.message.edit_text(
            text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}',
            parse_mode='Markdown',
            reply_markup=let_cycle_keyboard
        )


@dp.callback_query(F.data == 'let_cycle_answer_pressed_back')
async def answer(callback: CallbackQuery):
    global current_message
    current_message -= 1
    if current_message == 0:
        await callback.message.edit_text(text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}', parse_mode='Markdown', reply_markup=let_cycle_keyboard_beginning)
    elif current_message <= 12:
        await callback.message.edit_text(text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}', parse_mode='Markdown', reply_markup=let_cycle_keyboard)
    else:
        await callback.message.edit_text(text=f'{rosario.letaniasDeLaVirgenMessage[current_message]}', parse_mode='Markdown', reply_markup=let_cycle_keyboard_last)


@dp.callback_query(F.data == 'let_fin_pressed')
async def answer(callback: CallbackQuery):
    global cycleOraciones, current_message
    current_message = 0
    await callback.message.answer(text=f'{rosario.bajoTuAmparo[language]}', reply_markup=ruega_keyboard)
    cycleOraciones = False
@dp.callback_query(F.data == 'ruega_pressed')
async def answer(callback: CallbackQuery):
    global cycleOraciones
    await callback.message.answer(text=f'*Gu√≠a:* Ruega por nosotros Santa Madre de Dios\n*Todos:* Para que seamos dignos de las promesas de Cristo\n\n Amen', parse_mode='Markdown')
    await callback.answer(text='La oraci√≥n ha terminado\n\nDios lo bendiga')
    cycleOraciones = False


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@dp.message()
async def send_echo(message: Message):
    await message.reply(text=message.text)

# –ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—Ç–∞

async def handle(request):
    return web.Response(text="Bot is running üôè")

async def main():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª)
        await bot.delete_webhook()

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        polling_task = asyncio.create_task(dp.start_polling(bot))

        # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
        app = web.Application()
        app.router.add_get("/", handle)
        runner = web.AppRunner(app)
        await runner.setup()
        port = int(os.getenv("PORT", 10000))
        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()

        print(f"Bot is running on port {port}")

        # –ß—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        await polling_task

    finally:
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await bot.session.close()



if __name__ == "__main__":
    asyncio.run(main())

















